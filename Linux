Kill a process:
kill -9 $(ps aux | grep intellij | awk '{print $2}')

The most important case for killing Javascript debugging sessions:
kill -9 $(ps aux | grep -- '--remote-debugging-port' | awk '{print $2}')

Find listening port:
lsof -i :9515

Run the script with debugging enabled to track its behavior:
bash -x yourscript.sh

Monitor the Java application's process tree to see if child threads or processes linger:
pstree -p <java_pid>

Use strace to observe system calls when closing the console to identify hanging points:
strace -p <java_pid>

To verify which signals the application receives, you can monitor the process using strace:
strace -p <java_pid> -e signal

List services run on Linux startup and remove them:
ls ~/.config/autostart/
rm ~/.config/autostart/<program>.desktop

If you installed software via Snap in Linux, you can disable updates easily:
Example:
if you installed code via Snap: snap install code --classic
You can disable automatic updates by running: sudo snap refresh --hold code
To re-enable updates later: sudo snap refresh --unhold code

Find maven effective settings:
mvn help:effective-settings

find maven path:
whereis mvn

SNAP
https://snapcraft.io/docs/installing-snap-on-ubuntu

SDKMAN!
https://sdkman.io/sdks

Java:
sdk list java
sdk install java 8.0.252-zulu
sdk default java 17.0.8-tem

Maven:
sdk install maven

Linux Display Mode (XWayland-X11 or Wayland):
Use Wayland for Java applications:
1. nano ~/.profile
2. 
if command -v java >/dev/null 2>&1; then
  export GDK_BACKEND=x11
fi
3. source ~/.profile

Use X11 for specific applications:
GDK_BACKEND=x11 java -jar MySwingApp.jar
or
GDK_BACKEND=x11 ./eclipse





