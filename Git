Git log:
git log --oneline --all --graph


Git update:
git fetch and then git merge, or git pull --no-rebase (git pull)
git fetch and then git rebase, or git pull --rebase


if you want to add your changes on the feature branch to the top of the changes that you get from the master after updating the master:
run 'git rebase master' on the feature branch so your changes will be added to the top of changes from master and you know about the possible conflicts


Show local branches:
git branch


Show all branches including remote branches:
git branch -a


then for checking out the remote branch and having it on your local:
git checkout origin/branch_name
then for checking out that branch locally:
git checkout branch_name



git undo all uncommitted or unsaved changes:

git reset
This will revert all local uncommitted changes (should be executed in repo root):

git checkout .
You can also revert uncommitted changes only to particular file or directory:

git checkout -
return to the previous branch

git checkout [some_dir|file.txt]
Yet another way to revert all uncommitted changes (longer to type, but works from any subdirectory):

git reset --hard HEAD

git fetch --all: Fetches all branches from all remotes. It's a safe way to update your local view of the remotes without changing your local branches.

Squash two commits locally and remotely:
1. git rebase -i HEAD~2
2. 
edit: 
pick 123abc Fix pipeline error
pick 456def Minor fix for pipeline
to:
pick 123abc Fix pipeline error
squash 456def Minor fix for pipeline
3. 
git push --force
or 
git push --force origin your-branch-name





